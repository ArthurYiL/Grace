<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grace.Net</name>
    </assembly>
    <members>
        <member name="T:Grace.DependencyInjection.Attributes.WhenAppSettingAttribute">
            <summary>
            Limits an export to only be used when an app setting is a particular value
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingAttribute.#ctor(System.String,System.Object)">
            <summary>
            Default Constructor
            </summary>
            <param name="settingName"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingAttribute.ProvideCondition(System.Type)">
            <summary>
            Provide an export condition for an attirbuted type
            </summary>
            <param name="attributedType"></param>
            <returns></returns>
        </member>
        <member name="P:Grace.DependencyInjection.Attributes.WhenAppSettingAttribute.CacheAnswer">
            <summary>
            Cache the answer on if the attribute should be used
            </summary>
        </member>
        <member name="T:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentAttribute">
            <summary>
            Limits an export to be used only when an app setting is not present
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentAttribute.#ctor(System.String)">
            <summary>
            Default Constructor
            </summary>
            <param name="settingName"></param>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentAttribute.ProvideCondition(System.Type)">
            <summary>
            Provide an export condition for an attirbuted type
            </summary>
            <param name="attributedType"></param>
            <returns></returns>
        </member>
        <member name="P:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentAttribute.CacheAnswer">
            <summary>
            Cache the answer to if the condition is meet
            </summary>
        </member>
        <member name="T:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentOrFalseAttribute">
            <summary>
            Export condition attribute that limits the export to only when 
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentOrFalseAttribute.#ctor(System.String)">
            <summary>
            Default Constructor
            </summary>
            <param name="settingName"></param>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentOrFalseAttribute.ProvideCondition(System.Type)">
            <summary>
            Provide an export condition for an attirbuted type
            </summary>
            <param name="attributedType"></param>
            <returns></returns>
        </member>
        <member name="P:Grace.DependencyInjection.Attributes.WhenAppSettingNotPresentOrFalseAttribute.CacheAnswer">
            <summary>
            Cache the answer, default is true
            </summary>
        </member>
        <member name="T:Grace.DependencyInjection.Attributes.WhenAppSettingPresentAttribute">
            <summary>
            Limits export to when an app setting is present
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingPresentAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="settingName"></param>
        </member>
        <member name="M:Grace.DependencyInjection.Attributes.WhenAppSettingPresentAttribute.ProvideCondition(System.Type)">
            <summary>
            Provide an export condition for an attirbuted type
            </summary>
            <param name="attributedType"></param>
            <returns></returns>
        </member>
        <member name="P:Grace.DependencyInjection.Attributes.WhenAppSettingPresentAttribute.CacheAnswer">
            <summary>
            Cache the answer
            </summary>
        </member>
        <member name="T:Grace.DependencyInjection.Conditions.WhenAppSetting">
            <summary>
            Export condition that limits the export to only be used when the provided app.config set value is provided
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSetting.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="settingName">app setting name</param>
            <param name="settingValue">app setting value</param>
            <param name="cacheAnswer">should the answer be cached</param>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSetting.ConditionMeet(Grace.DependencyInjection.IInjectionScope,Grace.DependencyInjection.IInjectionContext,Grace.DependencyInjection.IExportStrategy)">
            <summary>
            returns true when the app.config setting is equal to the provided value
            </summary>
            <param name="scope"></param>
            <param name="injectionContext"></param>
            <param name="exportStrategy"></param>
            <returns></returns>
        </member>
        <member name="T:Grace.DependencyInjection.Conditions.WhenAppSettingNotPresent">
            <summary>
            Limits an export to only be used when an app setting value is not present
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSettingNotPresent.#ctor(System.String,System.Boolean)">
            <summary>
            Defaut Constructor
            </summary>
            <param name="settingName"></param>
            <param name="cacheAnswer"></param>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSettingNotPresent.ConditionMeet(Grace.DependencyInjection.IInjectionScope,Grace.DependencyInjection.IInjectionContext,Grace.DependencyInjection.IExportStrategy)">
            <summary>
            Called to determine if the export strategy meets the condition to be activated
            </summary>
            <param name="scope">injection scope that this export exists in</param>
            <param name="injectionContext">injection context for this request</param>
            <param name="exportStrategy">export strategy being tested</param>
            <returns>true if the export meets the condition</returns>
        </member>
        <member name="T:Grace.DependencyInjection.Conditions.WhenAppSettingNotPresentOrFalse">
            <summary>
            Limits an export to only be used when an app setting is not present or is false
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSettingNotPresentOrFalse.#ctor(System.String,System.Boolean)">
            <summary>
            Default Constructor
            </summary>
            <param name="settingName"></param>
            <param name="cacheAnswer"></param>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSettingNotPresentOrFalse.ConditionMeet(Grace.DependencyInjection.IInjectionScope,Grace.DependencyInjection.IInjectionContext,Grace.DependencyInjection.IExportStrategy)">
            <summary>
            Called to determine if the export strategy meets the condition to be activated
            </summary>
            <param name="scope">injection scope that this export exists in</param>
            <param name="injectionContext">injection context for this request</param>
            <param name="exportStrategy">export strategy being tested</param>
            <returns>true if the export meets the condition</returns>
        </member>
        <member name="T:Grace.DependencyInjection.Conditions.WhenAppSettingPresent">
            <summary>
            Limits an export to only be used when an app setting is present
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSettingPresent.#ctor(System.String,System.Boolean)">
            <summary>
            Default Constructor
            </summary>
            <param name="settingName"></param>
            <param name="cacheAnswer"></param>
        </member>
        <member name="M:Grace.DependencyInjection.Conditions.WhenAppSettingPresent.ConditionMeet(Grace.DependencyInjection.IInjectionScope,Grace.DependencyInjection.IInjectionContext,Grace.DependencyInjection.IExportStrategy)">
            <summary>
            Called to determine if the export strategy meets the condition to be activated
            </summary>
            <param name="scope">injection scope that this export exists in</param>
            <param name="injectionContext">injection context for this request</param>
            <param name="exportStrategy">export strategy being tested</param>
            <returns>true if the export meets the condition</returns>
        </member>
        <member name="T:Grace.DependencyInjection.Types">
            <summary>
            Static class that contains short cuts for finding classes to export
            </summary>
        </member>
        <member name="M:Grace.DependencyInjection.Types.FromThisAssembly">
            <summary>
            Returns the list of types contained in the calling assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grace.DependencyInjection.Types.FromExecutingAssembly">
            <summary>
            Returns the list of exported types from the Executing Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grace.DependencyInjection.Types.FromEntryAssembly">
            <summary>
            Returns the list of exported types from the Entry Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grace.DependencyInjection.Types.FromAssembly(System.Reflection.Assembly)">
            <summary>
            Gets a listed of exported types from an assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Grace.DependencyInjection.Types.From(System.Type[])">
            <summary>
            Allows the developer to pass a params list to the Register method
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Grace.DependencyInjection.Types.FromDirectory(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Returns a list of exported types from assemblies located in the directories provided
            </summary>
            <param name="directory"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Grace.DependencyInjection.Types.LoadAssemblyWithNoExceptions(System.String)">
            <summary>
            Loads and assembly and returns null if there where exceptions
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
    </members>
</doc>
