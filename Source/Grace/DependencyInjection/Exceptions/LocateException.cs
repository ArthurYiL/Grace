using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Grace.DependencyInjection.Exceptions
{
	/// <summary>
	/// Location Information
	/// </summary>
	public class LocationInformationEntry
	{
		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="locateName">name used to locate</param>
		/// <param name="locateType">type used to locate</param>
		/// <param name="targetInfo"></param>
		public LocationInformationEntry(string locateName, Type locateType, IInjectionTargetInfo targetInfo)
		{
			TargetInfo = targetInfo;
			LocateName = locateName;
			LocateType = locateType;
		}

		/// <summary>
		/// Target Info
		/// </summary>
		public IInjectionTargetInfo TargetInfo { get; private set; }

		/// <summary>
		/// Locate Name used when locating
		/// </summary>
		public string LocateName { get; private set; }

		/// <summary>
		/// Type used when locating
		/// </summary>
		public Type LocateType { get; private set; }
	}

	/// <summary>
	/// Base exception for all exception that can be generated by Locate
	/// </summary>
	public class LocateException : Exception
	{
		private readonly List<LocationInformationEntry> locationInformation = new List<LocationInformationEntry>(); 
		private readonly string locateName;
		private readonly Type locatingType;
		private readonly IInjectionContext currentContext;

		/// <summary>
		/// Default Constructor takes the locating type and the current injection context
		/// </summary>
		/// <param name="locateName">the name used when locating</param>
		/// <param name="locatingType">the type used when locating</param>
		/// <param name="currentContext">the current context when the exception was generated</param>
		public LocateException(string locateName, Type locatingType, IInjectionContext currentContext)
		{
			this.locateName = locateName;
			this.locatingType = locatingType;
			this.currentContext = currentContext.Clone();
		}

		/// <summary>
		/// Type that is being located, this can be null when locating something by name
		/// </summary>
		public Type LocatingType
		{
			get { return locatingType; }
		}

		/// <summary>
		/// This is the type that has the dependency on LocateType
		/// </summary>
		public Type OwningType
		{
			get
			{
				if (currentContext.TargetInfo != null)
				{
					return currentContext.TargetInfo.InjectionType;
				}

				return null;
			}
		}

		/// <summary>
		/// Injection context for exception
		/// </summary>
		protected IInjectionContext InjectionContext
		{
			get { return currentContext; }
		}

		/// <summary>
		/// The named that was used during location, this can be null when locating by type
		/// </summary>
		public string LocateName
		{
			get { return locateName; }
		}

		/// <summary>
		/// Adds a new location information entry
		/// </summary>
		/// <param name="entry">new entry</param>
		public void AddLocationInformationEntry(LocationInformationEntry entry)
		{
			locationInformation.Add(entry);
		}

		/// <summary>
		/// Location Information for this exception
		/// </summary>
		public IEnumerable<LocationInformationEntry> LocationInformation
		{
			get { return locationInformation; }
		}

		/// <summary>
		/// Display string to be used for error messages
		/// </summary>
		protected string LocateDisplayString
		{
			get
			{
				if (LocatingType != null)
				{
					return locatingType.FullName;
				}

				return LocateName;
			}
		}
	}
}
